/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {

		ArrayList<Libro> catalogo = new ArrayList<Libro>();

		while (true) {
			int opcion = menu();
			switch (opcion) {
			case 1:
				// TODO Alta de Libro
				// titulo:isbn:genero:autor:paginas
				alta(catalogo);
				break;
			case 2:
				listarLibros(catalogo);
				break;
			case 3:
				baja(catalogo);
				break;
			case 4:
				buscarLibros(catalogo);
				break;
			case 5:
				ordenarLibros(catalogo);
				break;
			case 6:
				librosDePrueba(catalogo);
				break;
			default:
				break;
			}
		}
	}

	private static int menu() {
		int opcion = 0;

		do {
			System.out.println("---- MENU PRINCIPAL ----");
			System.out.println("Opciones:");
			System.out.println("1. Alta de Libro");
			System.out.println("2. Lista de Libros");
			System.out.println("3. Baja de Libros");
			System.out.println("4. Búsqueda de Libros");
			System.out.println("5. Ordenacion de Libros");
			System.out.println("6. Introducir Libros de prueba");
			System.out.println("Introduce la opcion:");

			opcion = leerOpcion(6);

		} while (opcion <= 0);

		return opcion;
	}

	private static int leerOpcion(int max) {
		int opcion = -1;
		try {
			Scanner teclado = new Scanner(System.in);
			opcion = teclado.nextInt();
			if (opcion > max)
				opcion = -1;
		} catch (InputMismatchException e) {
			System.out.println("Opción incorrecta");
		}

		return opcion;
	}
	
	/**
	 * Nos permite añadir algunos libros automaticamente para realizar pruebas.
	 * 
	 * @param catalogo catalogo contiene toda la informacion de todos los libros introducidos
	 */
	private static void librosDePrueba(ArrayList<Libro> catalogo) {
		Libro libro;
		
		libro = new Libro("Celestina", "0-3538-1166-1", Genero.NOVELA, "Fernando", 220);
		catalogo.add(libro);
		libro = new Libro("Odisea", "1-4568-21AB-2", Genero.NOVELA, "Homero", 350);
		catalogo.add(libro);
		libro = new Libro("Brandewijn", "4-3348-13466-5", Genero.FICCION, "Juan", 150);
		catalogo.add(libro);
		libro = new Libro("annabelle", "2-2238-1556-6", Genero.FICCION, "Warren", 165);
		catalogo.add(libro);
	}

	private static void alta(ArrayList<Libro> catalogo) {
		// Leer de la entrada
		String datosLibro = obtenerDatosLibro();
		// titulo:isbn:genero:autor:paginas
		// Procesar la entrada
		Libro libro = procesaEntrada(datosLibro);
		// Crear el libro con los datos de la entrada
		catalogo.add(libro);
		// Meter el libro en el catalogo
	}

	private static void baja(ArrayList<Libro> catalogo) {
		
		// Mediante ISBN, puede haber varios libros con el mismo ISBN, tenerlo en cuenta
		// a la hora de eliminarlo.
		// indexOf(Object o)
		
		Scanner teclado = new Scanner(System.in);
		System.out.println("¿Que libro quiere borrar? Indique el indice.");
		int opcion = teclado.nextInt();
		opcion = opcion - 1;
		// Eliminamos el indice dado.
		catalogo.remove(opcion);

	}

	/**
	 * Nos permite buscar un libro en la biblioteca mediante el ISBN.
	 * 
	 * @param catalogo contiene toda la informacion de todos los libros introducidos
	 */
	private static void buscarLibros(ArrayList<Libro> catalogo) {

		Scanner teclado = new Scanner(System.in);
		System.out.println("¿Que libro quiere buscar? Indique el ISBN.");
		String opcion = teclado.nextLine();

		Libro libro = new Libro();
		libro.setIsbn(opcion);
		int i = catalogo.indexOf(libro);

		if (i >= 0) {
			int orden = i + 1;
			System.out.println(orden + " - " + catalogo.get(i));
		} else {
			System.out.println("No hay ningun libro que coincida con ese ISBN.");
		}
	}

	private static void ordenarLibros(ArrayList<Libro> catalogo) {
		while (true) {
			int opcion = menuOrdenar();
			switch (opcion) {
			case 1:
				// TODO Alta de Libro
				// titulo:isbn:genero:autor:paginas
				ordenarLibrosAlfabetico(catalogo);
				break;
			case 2:
				ordenarLibrosNumeroPaginas(catalogo);
				break;
			case 3:
				menu();
				break;
			default:
				break;
			}
		}
	}

	private static int menuOrdenar() {
		int opcion = 0;

		do {
			System.out.println("---- MENU DE ORDENACION ----");
			System.out.println("Opciones:");
			System.out.println("1. Ordenar por orden alfabetico");
			System.out.println("2. Ordenar por numero de paginas");
			System.out.println("3. Volver al menu principal");
			System.out.println("Introduce la opcion:");

			opcion = leerOpcionOrdenar(3);

		} while (opcion <= 0);

		return opcion;
	}
	
	private static int leerOpcionOrdenar(int max) {
		int opcion = -1;
		try {
			Scanner teclado = new Scanner(System.in);
			opcion = teclado.nextInt();
			if (opcion > max)
				opcion = -1;
		} catch (InputMismatchException e) {
			System.out.println("Opción incorrecta");
		}

		return opcion;
	}

	private static void ordenarLibrosAlfabetico(ArrayList<Libro> catalogo) {

		System.out.println("-- Ordenados por orden alfabetico --");
		Collections.sort(catalogo, new Comparator<Libro>() {
			   public int compare(Libro obj1, Libro obj2) {
			      return obj1.getTitulo().compareToIgnoreCase(obj2.getTitulo());
			   }
		});

		for(Libro libro: catalogo){
		    System.out.println(libro.toString());
		}
	}

	private static void ordenarLibrosNumeroPaginas(ArrayList<Libro> catalogo) {
		// 2. Una vez hecho el primero, ordenar por numero de paginas. (compare(Object
		// a, Object b))
		System.out.println("-- Ordenados por numero de paginas --");
	}

	private static void listarLibros(ArrayList<Libro> catalogo) {
		for (int i = 0; i < catalogo.size(); i++) {
			int orden = i + 1;
			System.out.println(orden + " - " + catalogo.get(i));
		}
	}

	private static String obtenerDatosLibro() {
		String datos = null;

		boolean validado = false;
		while (!validado) {
			System.out.println("Introduce los datos de un libro.");
			System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
			try {
				datos = leerCadena();
				if (true)// Supongo de momento que valida siempre
					validado = true;
			} catch (InputMismatchException e) {
				System.out.println("Datos de entrada no válidos");
			}
		}

		return datos;
	}

	private static Libro procesaEntrada(String entrada) {
		Libro libro = null;

		String[] datos = entrada.split(":");

		String titulo = datos[0];
		String isbn = datos[1];
		Genero genero = Genero.getGenero(datos[2]);
		String autor = datos[3];
		Integer paginas = Integer.parseInt(datos[4]);

		libro = new Libro(titulo, isbn, genero, autor, paginas);

		return libro;
	}

	private static String leerCadena() {
		String opcion = null;
		Scanner teclado = new Scanner(System.in);
		opcion = teclado.nextLine();
		return opcion;
	}
}
